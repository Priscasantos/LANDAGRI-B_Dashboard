"""
Exemplo de Uso - Gr√°ficos Consolidados do Calendar
==================================================

Demonstra como usar os componentes consolidados do old_calendar
em diferentes contextos dentro do dashboard.

Autor: Dashboard Iniciativas LULC
Data: 2025-08-07
"""

import streamlit as st
from typing import Dict


def example_complete_analysis(filtered_data: Dict) -> None:
    """
    Exemplo 1: An√°lise completa usando a fun√ß√£o consolidada principal.
    
    Args:
        filtered_data: Dados filtrados do calend√°rio agr√≠cola
    """
    from dashboard.components.agricultural_analysis.charts.calendar import render_complete_calendar_analysis
    
    st.markdown("## üìÖ Exemplo 1: An√°lise Completa")
    st.markdown("Usa a fun√ß√£o principal que renderiza todos os gr√°ficos organizados:")
    
    # Uma √∫nica chamada renderiza toda a an√°lise
    render_complete_calendar_analysis(filtered_data)


def example_modular_usage(filtered_data: Dict) -> None:
    """
    Exemplo 2: Uso modular de se√ß√µes espec√≠ficas.
    
    Args:
        filtered_data: Dados filtrados do calend√°rio agr√≠cola
    """
    from dashboard.components.agricultural_analysis.charts.calendar import (
        render_crop_distribution_charts,
        render_monthly_activity_charts,
        render_regional_analysis_for_region
    )
    
    st.markdown("## üß© Exemplo 2: Uso Modular")
    st.markdown("Renderiza apenas se√ß√µes espec√≠ficas conforme necess√°rio:")
    
    # Seletor de an√°lise
    analysis_type = st.selectbox(
        "Escolha o tipo de an√°lise:",
        [
            "Distribui√ß√£o de Culturas",
            "Atividades Mensais", 
            "An√°lise Regional Espec√≠fica"
        ]
    )
    
    if analysis_type == "Distribui√ß√£o de Culturas":
        render_crop_distribution_charts(filtered_data)
    
    elif analysis_type == "Atividades Mensais":
        render_monthly_activity_charts(filtered_data)
    
    elif analysis_type == "An√°lise Regional Espec√≠fica":
        # Seleciona regi√£o espec√≠fica
        from dashboard.components.agricultural_analysis.charts.calendar import get_region_states
        regions = list(get_region_states().keys())
        selected_region = st.selectbox("Selecione uma regi√£o:", regions)
        
        if selected_region:
            render_regional_analysis_for_region(filtered_data, selected_region)


def example_individual_charts(filtered_data: Dict) -> None:
    """
    Exemplo 3: Uso de gr√°ficos individuais.
    
    Args:
        filtered_data: Dados filtrados do calend√°rio agr√≠cola
    """
    from dashboard.components.agricultural_analysis.charts.calendar import (
        create_crop_type_distribution_chart,
        create_planting_vs_harvesting_per_month_chart,
        create_regional_heatmap_chart
    )
    
    st.markdown("## üéØ Exemplo 3: Gr√°ficos Individuais")
    st.markdown("Usa gr√°ficos espec√≠ficos em layouts customizados:")
    
    # Layout customizado com 3 colunas
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("#### üåæ Distribui√ß√£o")
        fig1 = create_crop_type_distribution_chart(filtered_data)
        if fig1:
            st.plotly_chart(fig1, use_container_width=True)
    
    with col2:
        st.markdown("#### üìÖ Plantio vs Colheita")
        fig2 = create_planting_vs_harvesting_per_month_chart(filtered_data)
        if fig2:
            st.plotly_chart(fig2, use_container_width=True)
    
    with col3:
        st.markdown("#### üó∫Ô∏è Regional - Sul")
        fig3 = create_regional_heatmap_chart(filtered_data, "Sul")
        if fig3:
            st.plotly_chart(fig3, use_container_width=True)


def example_custom_dashboard(filtered_data: Dict) -> None:
    """
    Exemplo 4: Dashboard customizado usando m√∫ltiplos componentes.
    
    Args:
        filtered_data: Dados filtrados do calend√°rio agr√≠cola
    """
    from dashboard.components.agricultural_analysis.charts.calendar import (
        create_consolidated_calendar_matrix_chart,
        create_main_crops_seasonality_chart,
        render_all_regional_analysis,
        create_total_activities_per_month_chart
    )
    
    st.markdown("## üèóÔ∏è Exemplo 4: Dashboard Customizado")
    st.markdown("Combina diferentes componentes em um layout personalizado:")
    
    # Header com m√©tricas
    st.markdown("### üìä Vis√£o Geral Nacional")
    
    # Primeira linha: matriz e sazonalidade
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("#### üóìÔ∏è Matriz Consolidada")
        fig_matrix = create_consolidated_calendar_matrix_chart(filtered_data)
        if fig_matrix:
            st.plotly_chart(fig_matrix, use_container_width=True)
    
    with col2:
        st.markdown("#### üåü Sazonalidade")
        fig_season = create_main_crops_seasonality_chart(filtered_data)
        if fig_season:
            st.plotly_chart(fig_season, use_container_width=True)
    
    # Segunda linha: atividades mensais
    st.markdown("#### üìà Atividades Mensais")
    fig_monthly = create_total_activities_per_month_chart(filtered_data)
    if fig_monthly:
        st.plotly_chart(fig_monthly, use_container_width=True)
    
    # Terceira se√ß√£o: an√°lise regional
    st.markdown("---")
    st.markdown("### üåç An√°lise Regional Detalhada")
    render_all_regional_analysis(filtered_data)


def example_export_capabilities(filtered_data: Dict) -> None:
    """
    Exemplo 5: Capacidades de exporta√ß√£o e download.
    
    Args:
        filtered_data: Dados filtrados do calend√°rio agr√≠cola
    """
    from dashboard.components.agricultural_analysis.charts.calendar import (
        create_crop_diversity_by_region_chart,
        create_calendar_heatmap_chart
    )
    
    st.markdown("## üì• Exemplo 5: Exporta√ß√£o de Gr√°ficos")
    st.markdown("Demonstra como exportar gr√°ficos individuais:")
    
    # Gr√°fico de diversidade
    st.markdown("#### üå± Diversidade por Regi√£o")
    fig_diversity = create_crop_diversity_by_region_chart(filtered_data)
    
    if fig_diversity:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.plotly_chart(fig_diversity, use_container_width=True)
        
        with col2:
            st.markdown("##### üìä Op√ß√µes de Export")
            
            # Op√ß√µes de download usando utilit√°rios do projeto
            try:
                from scripts.utilities.utils import export_plotly_figure
                
                if st.button("üì• Download PNG", key="diversity_png"):
                    export_plotly_figure(
                        fig_diversity, 
                        "diversidade_por_regiao.png",
                        "‚¨áÔ∏è Download Diversidade (PNG)"
                    )
                
                if st.button("üìÑ Download HTML", key="diversity_html"):
                    fig_html = fig_diversity.to_html()
                    st.download_button(
                        "üìÑ Download HTML",
                        fig_html,
                        "diversidade_por_regiao.html",
                        "text/html"
                    )
                    
            except ImportError:
                st.info("üí° Fun√ß√µes de export n√£o available")
    
    # Gr√°fico de heatmap
    st.markdown("#### üî• Heatmap Nacional")
    fig_heatmap = create_calendar_heatmap_chart(filtered_data)
    
    if fig_heatmap:
        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        # Mostra c√≥digo para replicar
        with st.expander("üîß Ver c√≥digo para replicar"):
            st.code("""
from dashboard.components.agricultural_analysis.charts.calendar import create_calendar_heatmap_chart

# Criar o gr√°fico
fig = create_calendar_heatmap_chart(filtered_data)

# Exibir no Streamlit
if fig:
    st.plotly_chart(fig, use_container_width=True)

# Salvar arquivo
if fig:
    fig.write_html("heatmap_calendario.html")
    fig.write_image("heatmap_calendario.png")
""", language="python")


def main_example_selector(filtered_data: Dict) -> None:
    """
    Seletor principal de exemplos.
    
    Args:
        filtered_data: Dados filtrados do calend√°rio agr√≠cola
    """
    st.title("üìö Exemplos de Uso - Gr√°ficos Calendar Consolidados")
    st.markdown("*Demonstra√ß√µes pr√°ticas dos componentes migrados do old_calendar*")
    
    # Seletor de exemplo
    example_choice = st.selectbox(
        "Escolha um exemplo:",
        [
            "An√°lise Completa (render_complete_calendar_analysis)",
            "Uso Modular (se√ß√µes espec√≠ficas)",
            "Gr√°ficos Individuais (customiza√ß√£o)",
            "Dashboard Personalizado (combina√ß√£o)",
            "Capacidades de Exporta√ß√£o"
        ]
    )
    
    st.markdown("---")
    
    # Executa exemplo selecionado
    if example_choice.startswith("An√°lise Completa"):
        example_complete_analysis(filtered_data)
    
    elif example_choice.startswith("Uso Modular"):
        example_modular_usage(filtered_data)
    
    elif example_choice.startswith("Gr√°ficos Individuais"):
        example_individual_charts(filtered_data)
    
    elif example_choice.startswith("Dashboard Personalizado"):
        example_custom_dashboard(filtered_data)
    
    elif example_choice.startswith("Capacidades de Exporta√ß√£o"):
        example_export_capabilities(filtered_data)


# Fun√ß√£o para ser usada em p√°ginas do Streamlit
def run_calendar_examples() -> None:
    """
    Fun√ß√£o principal para executar os exemplos em uma p√°gina Streamlit.
    """
    # Verifica se h√° dados na sess√£o
    if "agricultural_data" not in st.session_state:
        st.error("‚ùå Dados agr√≠colas n√£o found. Por favor, carregue os dados primeiro.")
        st.info("üí° V√° para a p√°gina Agricultural Analysis para carregar os dados.")
        return
    
    filtered_data = st.session_state.get("agricultural_data", {})
    
    if not filtered_data:
        st.warning("‚ö†Ô∏è Dados filtrados n√£o available.")
        return
    
    # Executa seletor de exemplos
    main_example_selector(filtered_data)


if __name__ == "__main__":
    # Para teste local
    st.set_page_config(
        page_title="Calendar Examples",
        page_icon="üìÖ",
        layout="wide"
    )
    
    # Dados de exemplo para teste
    example_data = {
        'crop_calendar': {
            'Soja': {
                'Mato Grosso': {
                    'planting_months': ['Sep', 'Oct', 'Nov'],
                    'harvesting_months': ['Jan', 'Feb', 'Mar']
                },
                'Rio Grande do Sul': {
                    'planting_months': ['Oct', 'Nov', 'Dec'],
                    'harvesting_months': ['Feb', 'Mar', 'Apr']
                }
            },
            'Milho': {
                'S√£o Paulo': {
                    'planting_months': ['Sep', 'Oct'],
                    'harvesting_months': ['Feb', 'Mar']
                },
                'Paran√°': {
                    'planting_months': ['Sep', 'Oct', 'Nov'],
                    'harvesting_months': ['Jan', 'Feb', 'Mar']
                }
            }
        }
    }
    
    main_example_selector(example_data)
