#!/usr/bin/env python3
"""
Script principal modernizado para an√°lise completa das iniciativas LULC.

Este script executa todos os m√≥dulos de an√°lise na ordem correta:
1. Preview dos dados
2. An√°lise principal com gr√°ficos comparativos 
3. Gr√°ficos temporais 
4. Gr√°ficos detalhados 

Estrutura de sa√≠da:
- graphics/comparisons/  - PNGs dos gr√°ficos comparativos entre iniciativas
- graphics/temporal/     - PNGs das an√°lises temporais das iniciativas  
- graphics/detailed/     - PNGs das an√°lises detalhadas espec√≠ficas

Estrutura do dashboard interativo:
- dashboard/comparisons/ - M√≥dulos Streamlit para an√°lises comparativas
- dashboard/temporal/    - M√≥dulos Streamlit para an√°lises temporais
- dashboard/detailed/    - M√≥dulos Streamlit para an√°lises detalhadas

Baseado na estrutura padr√£o do dashboard-agricultura
Autor: Sistema de An√°lise LULC
Data: 2025
"""

import sys
from pathlib import Path

# Adicionar o diret√≥rio scripts ao path
scripts_dir = Path(__file__).parent / "scripts"
sys.path.append(str(scripts_dir))

def run_analysis_step(module_name, description):
    """Executa um passo da an√°lise e trata erros"""
    print(f"\n{'='*60}")
    print(f"üîÑ EXECUTANDO: {description}")
    print(f"{'='*60}")
    
    try:
        if module_name == "preview_dados":
            from scripts.data_generation.data_processing import load_data, prepare_plot_data
            # Preview dos dados carregados
            print("üìä Carregando dados das iniciativas LULC...")
            df, metadata = load_data()
            print(f"‚úÖ Dados carregados: {len(df)} iniciativas")
            print(f"üìã Colunas dispon√≠veis: {list(df.columns)}")
            print(f"üè∑Ô∏è Tipos de iniciativas: {df['Tipo'].unique().tolist()}")
        elif module_name == "analise_comparativa":
            from scripts.plotting.generate_graphics import (
                plot_resolucao_acuracia,
                plot_timeline,
                plot_annual_coverage_multiselect,
                plot_classes_por_iniciativa,
                plot_distribuicao_classes,
                plot_distribuicao_metodologias            )
            from scripts.data_generation.data_processing import load_data, prepare_plot_data
            # Executar todas as fun√ß√µes principais de compara√ß√£o
            df, metadata = load_data()
            df_prepared = prepare_plot_data(df)
            
            plot_resolucao_acuracia(df_prepared)
            plot_timeline(df_prepared)
            plot_annual_coverage_multiselect(df_prepared)
            plot_classes_por_iniciativa(df_prepared)
            plot_distribuicao_classes(df_prepared)
            plot_distribuicao_metodologias(df_prepared)
            
        elif module_name == "analise_temporal":
            from dashboard.temporal.temporal import run as temporal_run
            # Executar an√°lises temporais
            temporal_run()
            
        elif module_name == "analise_detalhada":
            from dashboard.detailed.detailed import run as detailed_run
            from dashboard.detailed.overview import run as overview_run
            from dashboard.detailed.matrix import run as matrix_run
            # Executar todas as an√°lises detalhadas
            overview_run()
            detailed_run()
            matrix_run()
        
        print(f"‚úÖ {description} - CONCLU√çDO COM SUCESSO!")
        return True
        
    except ImportError as e:
        print(f"‚ùå ERRO DE IMPORTA√á√ÉO: {e}")
        print("üí° Verifique se todas as depend√™ncias est√£o instaladas:")
        print("   pip install -r requirements.txt")
        return False
        
    except Exception as e:
        print(f"‚ùå ERRO DURANTE EXECU√á√ÉO: {e}")
        print(f"üí° Verifique o m√≥dulo: {module_name}")
        return False

def check_dependencies():
    """Verifica se as depend√™ncias necess√°rias est√£o instaladas"""
    required_packages = ["pandas", "matplotlib", "numpy", "plotly", "seaborn", "streamlit"]
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå DEPEND√äNCIAS FALTANDO:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\nüí° Execute primeiro: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Todas as depend√™ncias est√£o instaladas!")
    return True

def create_output_directories():
    """Cria os diret√≥rios de sa√≠da para PNGs se n√£o existirem"""
    directories = [
        "graphics/comparisons", 
        "graphics/temporal",
        "graphics/detailed",
        "data/processed",
        "data/raw"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ Diret√≥rio verificado: {directory}")

def main():
    """Fun√ß√£o principal com menu interativo para gera√ß√£o de an√°lises LULC"""
    print("üõ∞Ô∏è AN√ÅLISE COMPLETA DAS INICIATIVAS LULC")
    print("=" * 60)
    print("üìä Sistema de An√°lise de Dados de Mapeamento LULC")
    print("üåç Compara√ß√£o entre iniciativas de monitoramento")
    print("üìÖ An√°lises temporais e comparativas detalhadas")
    print("=" * 60)
    
    if not check_dependencies():
        return False
    
    print("\nüìÅ CRIANDO DIRET√ìRIOS DE SA√çDA...")
    create_output_directories()
    
    while True:
        print("\nMENU PRINCIPAL:")
        print("1. Gerar An√°lises Comparativas")
        print("2. Gerar An√°lises Temporais")
        print("3. Gerar Apenas Dados Processados")
        print("0. Sair")
        opcao = input("Escolha uma op√ß√£o: ").strip()

        if opcao == "1":
            menu_analises_comparativas()
        elif opcao == "2":
            menu_analises_temporais()
        elif opcao == "3":
            menu_gerar_dados_processados()
        elif opcao == "0":
            print("Saindo...")
            break
        else:
            print("Op√ß√£o inv√°lida. Tente novamente.")

def menu_analises_comparativas():
    """Menu para an√°lises comparativas"""
    from scripts.plotting import generate_graphics
    opcoes = [
        ("Resolu√ß√£o vs Acur√°cia", generate_graphics.plot_resolucao_acuracia),
        ("Timeline das iniciativas", generate_graphics.plot_timeline),
        ("Cobertura anual", generate_graphics.plot_annual_coverage_multiselect),
        ("Classes por iniciativa", generate_graphics.plot_classes_por_iniciativa),
        ("Distribui√ß√£o de classes", generate_graphics.plot_distribuicao_classes),
        ("Distribui√ß√£o de metodologias", generate_graphics.plot_distribuicao_metodologias),
    ]
    
    print("\nAn√°lises Comparativas Dispon√≠veis:")
    for idx, (desc, _) in enumerate(opcoes, 1):
        print(f"{idx}. {desc}")
    print("0. Voltar ao menu principal")
    
    escolhas = input("Digite os n√∫meros das an√°lises desejadas separados por v√≠rgula (ex: 1,3,5): ").strip()
    if escolhas == "0":
        return
        
    indices = [int(i) for i in escolhas.split(",") if i.strip().isdigit() and 1 <= int(i) <= len(opcoes)]
      # Carregar dados uma vez
    from scripts.data_generation.data_processing import load_data, prepare_plot_data
    df, metadata = load_data()
    df_prepared = prepare_plot_data(df)
    
    for idx in indices:
        desc, func = opcoes[idx-1]
        print(f"\nüîÑ Gerando: {desc}")
        try:
            func(df_prepared)
            print(f"‚úÖ {desc} gerado com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao gerar {desc}: {e}")

def menu_analises_temporais():
    """Menu para an√°lises temporais"""
    print("\nüîÑ Executando an√°lises temporais...")
    try:
        run_analysis_step("analise_temporal", "An√°lises temporais das iniciativas")
    except Exception as e:
        print(f"‚ùå Erro nas an√°lises temporais: {e}")

def menu_gerar_dados_processados():
    """Menu para gerar apenas dados processados"""
    print("\nüîÑ Executando gera√ß√£o de dados processados...")
    print("üí° Esta op√ß√£o gera apenas os dados necess√°rios para o dashboard")
    print("üöÄ Processo otimizado - sem gr√°ficos")
    
    try:
        # Executar o script de processamento diretamente
        import sys
        import os
        current_dir = os.getcwd()
        sys.path.append(os.path.join(current_dir, 'scripts', 'data_generation'))
        
        # Executar gera√ß√£o de dataset
        print("\n1Ô∏è‚É£ GERANDO DATASET PRINCIPAL...")
        from generate_dataset import create_initiatives_dataset, add_derived_metrics
        df = create_initiatives_dataset()
        df = add_derived_metrics(df)
        
        # Adicionar coluna Sigla
        sigla_map = {
            'Copernicus Global Land Cover Service (CGLS)': 'CGLS',
            'Dynamic World (GDW)': 'GDW',
            'ESRI-10m Annual LULC': 'ESRI',
            'FROM-GLC': 'FROM-GLC',
            'Global LULC change 2000 and 2020': 'GLULC',
            'Global Pasture Watch (GPW)': 'GPW',
            'South America Soybean Maps': 'SASM',
            'WorldCover 10m 2021': 'WorldCover',
            'WorldCereal': 'WorldCereal',
            'Land Cover CCI': 'CCI',
            'MODIS Land Cover': 'MODIS',
            'GLC_FCS30': 'GLC_FCS30',
            'MapBiomas Brasil': 'MapBiomas',
            'PRODES Amaz√¥nia': 'PRODES-AMZ',
            'DETER Amaz√¥nia': 'DETER',
            'PRODES Cerrado': 'PRODES-CER',
            'TerraClass Amaz√¥nia': 'TerraClass',
            'IBGE Monitoramento': 'IBGE',
            'Agricultural Mapping': 'AgriMap'
        }
        df['Sigla'] = df['Nome'].map(sigla_map).fillna(df['Nome'].str[:8])
        
        # Salvar dataset
        df.to_csv('data/processed/initiatives_processed.csv', index=False, encoding='utf-8')
        print(f"‚úÖ Dataset salvo: {len(df)} iniciativas")
        
        # Executar gera√ß√£o de metadados
        print("\n2Ô∏è‚É£ GERANDO METADADOS PROCESSADOS...")
        from generate_metadata import create_initiatives_metadata
        import json
        
        metadata = create_initiatives_metadata()
        output_path = 'data/processed/metadata_processed.json'
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Metadados salvos: {len(metadata)} iniciativas")
        
        print("\nüéâ DADOS PROCESSADOS GERADOS COM SUCESSO!")
        print("üí° Os arquivos est√£o prontos para uso no dashboard")
        print("üìÅ Localiza√ß√£o: data/processed/")
        
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de dados: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö° An√°lise interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå ERRO CR√çTICO: {e}")
        print("üí° Verifique a instala√ß√£o e os arquivos de dados")
